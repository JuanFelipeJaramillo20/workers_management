trigger:
- main

pool:
  vmImage: ubuntu-latest
  name: local
  demands:
    - agent.name -equals DESKTOP-5CLOM36

steps:
# Step 1: Build and run the test environment using docker-compose.test.yml
- task: DockerCompose@0
  inputs:
    containerregistrytype: 'None'
    dockerComposeFile: '**/docker-compose.test.yml'
    action: 'Run services'
    detached: true
  displayName: 'Start Test Environment'

# Step 2: Wait for the app service to be healthy using PowerShell
- powershell: |
    Write-Host "Waiting for app service to be healthy..."
    $maxRetries = 30
    $retryCount = 0
    $healthy = $false
    while ($retryCount -lt $maxRetries -and -not $healthy) {
        $healthStatus = docker-compose -f docker-compose.test.yml exec app curl -s http://localhost:8080/actuator/health | ConvertFrom-Json
        if ($healthStatus.status -eq 'UP') {
            $healthy = $true
            Write-Host "App service is healthy."
        } else {
            Write-Host "Waiting for app service to start..."
            Start-Sleep -Seconds 10
            $retryCount++
        }
    }
    if (-not $healthy) {
        Write-Error "App service failed to start within the expected time."
        exit 1
    }
  displayName: 'Wait for app service to be healthy'

# Step 3: Run tests inside the test containers
- script: |
    docker-compose -f docker-compose.test.yml exec app ./mvnw test
  displayName: 'Run Integration and Unit Tests'

# Step 4: Tear down the test environment after tests are complete
- script: |
    docker-compose -f docker-compose.test.yml down
  displayName: 'Tear down test environment'

# Step 5: Conditional deployment if tests are successful
- task: DockerCompose@0
  condition: succeeded()
  inputs:
    containerregistrytype: 'None'
    dockerComposeFile: '**/docker-compose.yml'
    action: 'Run services'
    detached: true
  displayName: 'Deploy Production Services'