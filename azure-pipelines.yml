trigger:
- main

pool:
  vmImage: windows-latest
  name: local
  demands:
    - agent.name -equals DESKTOP-5CLOM36

steps:
# Step 1: Build and run the test environment using docker-compose.test.yml
- task: DockerCompose@0
  inputs:
    containerregistrytype: 'None'
    dockerComposeFile: '**/docker-compose.test.yml'
    action: 'Run services'
    detached: true

# Step 2: Wait for the app service to be healthy
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Waiting for app service to be healthy..."
      $max_retries = 30
      $retry_count = 0
      $healthy = $false
      while ($retry_count -lt $max_retries) {
        $status = docker-compose -f docker-compose.test.yml exec -T app curl -s http://localhost:8080/actuator/health | ConvertFrom-Json | Select-Object -ExpandProperty status
        if ($status -eq "UP") {
          $healthy = $true
          Write-Host "App service is healthy."
          break
        } else {
          Write-Host "Waiting for app service to start..."
          Start-Sleep -Seconds 10
          $retry_count++
        }
      }
      if (-not $healthy) {
        Write-Host "App service failed to start within the expected time."
        exit 1
      }
  displayName: 'Wait for app service to be healthy'

# Step 3: Run tests inside the test containers
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      docker-compose -f docker-compose.test.yml exec -T app ./mvnw test
  displayName: 'Run Integration and Unit Tests'

# Step 4: Tear down the test environment after tests are complete
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      docker-compose -f docker-compose.test.yml down
  displayName: 'Tear down test environment'

# Step 5: Conditional deployment if tests are successful
- task: DockerCompose@0
  condition: succeeded()
  inputs:
    containerregistrytype: 'None'
    dockerComposeFile: '**/docker-compose.yml'
    action: 'Run services'
    detached: true
  displayName: 'Deploy Production Services'